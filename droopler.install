<?php
/**
 * @file
 * Install, update and uninstall functions for the profilename install profile.
 */

use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function droopler_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'droopler_theme')
    ->set('admin', 'seven')
    ->save();

  // @TODO this should not really be here because this subtheme is not part
  // of the distribution
  $themes = \Drupal::service('theme_handler')->listInfo();
  if(isset($themes['droopler_subtheme'])) {
    \Drupal::configFactory()
      ->getEditable('system.theme')
      ->set('default', 'droopler_subtheme')
      ->set('admin', 'seven')
      ->save();
  }

  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('default_langcode', 'en')
    ->set('page.front', '/node/1')
    ->save();

  // If subtheme is available install the blog.
  // @TODO this should not really be here because this subtheme is not part of the distribution
  if (isset($themes['droopler_subtheme'])) {
    \Drupal::service('module_installer')->install(['d_blog']);
    \Drupal::service('module_installer')->install(['d_blog_init']);

    // Setup Linkit to work with blog
    $linkit = \Drupal::configFactory()->getEditable('linkit.linkit_profile.content_nodes');
    $matchers = $linkit->get("matchers");
    $keys = array_keys($matchers);
    $uuid = reset($keys);
    $linkit->set("matchers.$uuid.settings.bundles.blog_post", "blog_post")->save();
  }

  // Try to install custom init that alters the original one.
  try {
    \Drupal::service('module_installer')->install(['d_custom_init']);
  }
  catch (\Drupal\Core\Extension\MissingDependencyException $e) {
    \Drupal::logger('droopler_install')->notice('Custom content init not detected.');
  }

  // Apply updates.
  try {
    \Drupal::entityDefinitionUpdateManager()->applyUpdates();
  }
  catch (\Drupal\Core\Entity\EntityStorageException $e) {
    watchdog_exception('droopler_install', $e);
  }
}

/**
 * Implements hook_install_tasks()
 */
function droopler_install_tasks() {
  $tasks = [
    'd_content_init_create_all' => [
      'display' => TRUE,
      'display_name' => t('Init content'),
      'type' => 'normal',
    ],
    'd_content_init_add_footer' => [
      'display' => TRUE,
      'display_name' => t('Add footer'),
      'type' => 'normal',
    ],
    'droopler_module_configure_form' => [
      'display_name' => t('Configure additional modules'),
      'type' => 'form',
      'function' => 'Drupal\droopler\Installer\Form\ModuleConfigureForm',
    ],
    'droopler_module_install' => [
      'display_name' => t('Install additional modules'),
      'type' => 'batch',
    ],
  ];

  return $tasks;
}

/**
 * Installs the droopler modules in a batch.
 *
 * @param array $install_state
 *   The install state.
 *
 * @return array
 *   A batch array to execute.
 */
function droopler_module_install(array &$install_state) {

  $modules = $install_state['droopler_additional_modules'];

  $batch = [];
  if ($modules) {
    $operations = [];
    foreach ($modules as $module) {
      $operations[] = [
        '_droopler_install_module_batch',
        [[$module], $module, $install_state['form_state_values']],
      ];
    }

    $batch = [
      'operations' => $operations,
      'title' => t('Installing additional modules'),
      'error_message' => t('The installation has encountered an error.'),
    ];
  }

  return $batch;
}

/**
 * Implements callback_batch_operation().
 *
 * Performs batch installation of modules.
 */
function _droopler_install_module_batch($module, $module_name, $form_values, &$context) {
  set_time_limit(0);

  $optionalModulesManager = \Drupal::service('plugin.manager.droopler.optional_modules');

  try {
    $definition = $optionalModulesManager->getDefinition($module_name);
    if ($definition['type'] == 'module') {
      \Drupal::service('module_installer')->install($module, TRUE);
    }
    elseif ($definition['type'] == 'theme') {
      \Drupal::service('theme_installer')->install($module, TRUE);
    }

    $instance = $optionalModulesManager->createInstance($module_name);
    $instance->submitForm($form_values);
  }
  catch (\Exception $e) {

  }

  $context['results'][] = $module;
  $context['message'] = t('Installed %module_name modules.', ['%module_name' => $module_name]);
}

/**
 * Import a config file.
 * @todo To be moved to a new manager class.
 *
 * @param string $module
 *  Module name.
 * @param string $name
 *  Config file name without .yml extension.
 */
function _droopler_import_config($module, $name) {
  $config_path = drupal_get_path('module', $module) . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($name, $source->read($name));
}

/**
 * Droopler 1.3 Updates.
 */
function droopler_update_8101() {
  // Install modules.
  $modules = [
    'd_p_counters',
    'd_p_gallery',
    'd_p_side_embed',
    'd_p_side_tiles',
    'd_p_tiles',
    'colorbox',
    'd_p_help',
  ];
  \Drupal::service('module_installer')->install($modules, TRUE);

  // Install config.
  _droopler_import_config('d_content', 'field.field.node.content_page.field_page_section');
}

/**
 * Install new user role editor.
 */
function droopler_update_8102() {
  _droopler_import_config('d_content', 'user.role.d_editor');

  $configs = [
    'field.field.paragraph.d_p_carousel.field_d_icon' => 'd_p_carousel',
    'field.field.paragraph.d_p_carousel_item.field_d_image' => 'd_p_carousel',
    'field.field.node.blog_post.field_blog_main_image' => 'd_blog',
    'field.field.paragraph.d_p_blog_image.field_d_image' => 'd_blog',
    'field.field.paragraph.d_p_banner.field_d_icon' => 'd_p_banner',
    'field.field.paragraph.d_p_banner.field_d_image_background' => 'd_p_banner',
    'field.field.paragraph.d_p_group_of_counters.field_d_icon' => 'd_p_counters',
    'field.field.paragraph.d_p_group_of_counters.field_d_image_background' => 'd_p_counters',
    'field.field.paragraph.d_p_form.field_d_icon' => 'd_p_form',
    'field.field.paragraph.d_p_form.field_d_image_background' => 'd_p_form',
    'field.field.paragraph.d_p_gallery.field_d_icon' => 'd_p_gallery',
    'field.field.paragraph.d_p_gallery.field_d_image' => 'd_p_gallery',
    'field.field.paragraph.d_p_side_embed.field_d_icon' => 'd_p_side_embed',
    'field.field.paragraph.d_p_side_image.field_d_icon' => 'd_p_side_image',
    'field.field.paragraph.d_p_side_image.field_d_image_background' => 'd_p_side_image',
    'field.field.paragraph.d_p_side_tiles.field_d_icon' => 'd_p_side_tiles',
    'field.field.paragraph.d_p_side_tiles.field_d_image' => 'd_p_side_tiles',
    'field.field.paragraph.d_p_subscribe_file.field_d_icon' => 'd_p_subscribe_file',
    'field.field.paragraph.d_p_subscribe_file.field_d_image_background' => 'd_p_subscribe_file',
    'field.field.paragraph.d_p_group_of_text_blocks.field_d_icon' => 'd_p_text_blocks',
    'field.field.paragraph.d_p_single_text_block.field_d_icon' => 'd_p_text_blocks',
    'field.field.paragraph.d_p_text_paged.field_d_icon' => 'd_p_text_paged',
    'field.field.paragraph.d_p_text_with_bckg.field_d_icon' => 'd_p_text_with_bckg',
    'field.field.paragraph.d_p_text_with_bckg.field_d_image_background' => 'd_p_text_with_bckg',
    'field.field.paragraph.d_p_tiles.field_d_icon' => 'd_p_tiles',
    'field.field.paragraph.d_p_tiles.field_d_image' => 'd_p_tiles',
  ];

  foreach ($configs as $config => $module) {
    _droopler_import_config($module, $config);
  }
}

/**
 * Install checklist API module.
 */
function droopler_update_8103() {
  $modules = [
    'checklistapi',
  ];
  \Drupal::service('module_installer')->install($modules, TRUE);
}